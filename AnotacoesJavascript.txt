Variaveis------------------------------------------------------------------------------------------

let-> limitada ao escopo de bloco
var-> variavel global
const-> uma vez atribuido valor, nao muda mais

Operadores-----------------------------------------------------------------------------------------

Operador de igualdade eh ===, nao ==

Funcoes--------------------------------------------------------------------------------------------

Declaracao---
function multiplica(num1,num2) {
  let resultado = num1 * num2;
  return resultado;
}

Chamada---
multiplica(4, 7);

Eventos--------------------------------------------------------------------------------------------

onclick eh um evento, podemos ir para o documento, selecionar o campo html e dizer que ao clique ele
deve executar uma funcao:

document.querySelector('html').onclick = function() {
    alert('Ai! Pare de me cutucar!');
}

eh possivel fazer tudo junto (como o mostrado) ou fazer por partes:

let meuHTML = document.querySelector('html');

meuHTML.onclick = function() {
    alert('Ai! Pare de me cutucar!');
};

Objetos--------------------------------------------------------------------------------------------

Dentro da tag script no html:

var pessoa = {
  nome: ['Bob', 'Smith'],
  idade: 32,
  sexo: 'masculino',
  interesses: ['musica', 'esquiar'],
  bio: function() {
    alert(this.nome[0] + ' ' + this.nome[1] + ' tem ' + this.idade + ' anos de idade. 
    Ele gosta de ' + this.interesses[0] + ' e ' + this.interesses[1] + '.');
  },
  saudacao: function() {
    alert('Oi! Eu sou ' + this.nome[0] + '.');
  }
};

Dentro do console JavaScript devtools do navegador, testar:

pessoa.nome
pessoa.nome[0]
pessoa.idade
pessoa.interesses[1]
pessoa.bio()
pessoa.saudacao()

Um objeto eh composto por nome, membros e valores:

var nomeDoObjeto = {
  nomeMembro1: valorMembro1,
  nomeMembro2: valorMembro2,
  nomeMembro3: valorMembro3
};

Assim como em java onde temos atributos e metodos. Os objetos podem ser literais
ou instanciados por uma classe. Objetos literais (como o que criamos acima) geralmente 
sao montados e usados pra tranferir uma quantidade de dados, afinal eh melhor
mandar um objeto que varias infos pro banco.

Para acessar dados fazemos como no java:

Quando temos "nome: ['Bob', 'Smith']" e queremos o primeiro nome:
pessoa.nome[0]

Quando temos

nome : {
    primeiro: 'Bob',
    ultimo: 'Smith'
}

e queremos o primeiro nome:
pessoa.nome.primeiro

Notacao de colchetes-------------------------------------------------------------------------------

Em vez de:
pessoa.idade
pessoa.nome.primeiro

podemos fazer:
pessoa['idade']
pessoa['nome']['primeiro']

Uma vez que objetos sao arrays associativos

Setar informacoes----------------------------------------------------------------------------------

podemos adicionar valores e metodos nos objetos:

pessoa.idade = 45;
pessoa['nome']['ultimo'] = 'Cratchit';
pessoa.despedida = function() { alert( "Adeus a todos!" ); }

Usando sintaxe de colchetes eh possivel receber uma string e criar um novo membro (novo atributo)
a partir da string recebida:

var myDataName = nameInput.value; //crio uma var chamada myDataName e recebo um nome pra ela
var myDataValue = nameValue.value; //crio uma var chamada myDataValue e recebo um valor pra ela
pessoa[myDataName] = myDataValue; //crio um atributo para pessoa com o nome recebido e atribuo 
o valor recebido

Construtores---------------------------------------------------------------------------------------

Os contrutores sao como em java:

No html dentro da tag script:

function createNewPerson(name) {
  var obj = {};
  obj.name = name;
  obj.greeting = function() {
    alert('Hi! I\'m ' + obj.name + '.');
  };
  return obj;
}

Definimos a funcao createNewPerson recebendo um nome, essa funcao cria um objeto vazio, 
define um atributo chamado name, define um metodo chamado greeting e retorna o obj
criado.

No console:

var salva = createNewPerson('Salva');
salva.name;
salva.greeting();

Crio a var Salva chamando o metodo createNewPerson e passando um nome, a funcao retorna o
obj criado para dentro de var salva, a partir dai posso usar tranquilamente esse objeto.

Eh possivel criar uma funcao construtora da seguinte forma:

function Person(name) {
  this.name = name;
  this.greeting = function() {
    alert('Hi! I\'m ' + this.name + '.');
  };
}

O construtor deve ser iniciado com letra maiuscula e dele podemos fazer:

var person1 = new Person('Bob');
var person2 = new Person('Sarah');

Contrutor object()---------------------------------------------------------------------------------

Isso armazena um obj vazio na memoria:

var person1 = new Object();

Ai podemos adicionar coisas a esse obj:

person1.name = 'Chris';
person1['age'] = 38;
person1.greeting = function() {
  alert('Hi! I\'m ' + this.name + '.');
};

Eh possivel criar um obj vazio e preenche-lo:

var person1 = new Object({
  name: 'Chris',
  age: 38,
  greeting: function() {
    alert('Hi! I\'m ' + this.name + '.');
  }
});

Eh possivel criar um obj a partir de outro, crio um obj chamado person1 e o objeto person2 
sera um clone de person1:

var person2 = Object.create(person1);

Prototipos-----------------------------------------------------------------------------------------

Prototipos sao a heranca em Javascript.

Tudo em Javascript eh objeto, e todo objeto em Javascript tem uma propriedade
__proto__ que eh um link para seu prototipo, a cadeia funciona assim:

meuObj.__proto__ --> Object.prototype --> null

Se o objeto eh um array:

meuArray.__proto__ --> Array.prototype --> Object.prototype --> null

E assim por diante...

meuArray terah os metodos proprios, os metodos de Array e de Object...

caso eu chame uma funcao que nao exista em meuArray, o JavaScript vai buscando mais e
mais fundo na cadeia de prototipos (prototype chain). Ateh chegar em null (nesse caso darah)
erro, uma vez que null eh o ultimo elo da corrente

Nem todos os metodos de Object sao herdados por meuObj, para selecionar os que sao herdados
usamos a propriedade prototype

Os metodos comecados com Object.prototype serao herdados.

Criamos a classe Caneta, a partir dela instanciamos caneta1 e caneta2, se eu criar o metodo
sublinhar em caneta1, só ela podera sublinar coisas, mas se eu fizer:

Caneta.prototype.sublinhar = function() {
  alert('Texto sublinhado');
};

Tanto caneta1 quanto caneta2 terao o metodo sublinhar, pois a "classe pai" adicionou esse metodo
na cadeia de prototipos

Quando escrevemos uma Classe, uma boa pratica eh definir atributos no construtor e metodos
no prototipo:

  function Caneta(a, b, c){
    this a= a;
    this b= b;
    this c= c;
  }

  Caneta.prototype.tampar = function(){
    if (!this.tampada) {
      alert('Caneta tampada!');
      this.tampada = true;
    } else {
      alert('Ja esta tampada!');
    }
  }

Outro exemplo:

  function SalaAula(alunos){
    this.alunos = alunos;
  }

  SalaAula.prototype = {
    adicionarAluno: function(aluno){
      this.alunos.push(aluno)
    }
  }

const minhaSala = new SalaAula(['Joao', 'Maria'])
minhaSala.adicionarAluno('Pedro')

Como o JavaScript vai escalando a prototype chain ateh achar o metodo que inserimos, 
longas correntes de objetos podem gerar problemas de performance, sendo assim eh interessante
nao permitir cadeias tao longas.

Para ajudar existe a funcao hasOwnProperty que recebe uma propriedade e retorna true se o
objeto possui aquela propriedade no seu prototipo ou false se nao possui, por exemplo:

const meuObjeto = {
  a: 1,
  b: 2
}

meuObjeto.hasOwnProperty('a') retorna true

meuObjeto.hasOwnProperty('map') retorna false pq map eh de Object

Create---------------------------------------------------------------------------------------------

Construo um objeto com a===1 e b===2:
const meuObjeto = {
  a: 1,
  b: 2
}

Passo esse objeto para outro:
const novoObjeto = meuObjeto

Mudo o valor de b NESTE OUTRO OBJETO
novoObjeto.b = 5

Faço uma soma usando o valor de b no primeiro + valor de b no segundo
console.log(meuObjeto.b + novoObjeto.b)

o resultado dessa soma NAO EH 7 COMO O ESPERADO

quando fazemos
const novoObjeto = meuObjeto

eu estou passando uma referencia de meuObjeto para novoObjeto,
sendo assim, quando mudo o valor em novo, tbm mudo no antigo!!!

como quebrar isso?
const novoObjeto = Object.create(meuObjeto)

pronto, agora passei um clone meuObjeto para novoObjeto, dessa forma,
mudando o valor em novoObjeto estou mudando o valor do clone, 
nao do original, e a soma dara 7!

Heranca--------------------------------------------------------------------------------------------

Crio uma funcao SalaAula que recebe um array de alunos e salva esse array na propriedade
da classe
  function SalaAula(alunos){
    this.alunos = alunos || [];
  }

Ai usamos o prototype da funcao para poder adicionar novos metodos
  SalaAula.prototype = {
    adicionarAluno: function(aluno){
      this.alunos.push(aluno)
    },
    mostraAlunos : function(){
      return this.alunos;
    }
  }

Crio uma outra funcao NovaSala que chama a superclasse SalaAula
e passo para ela esse obj da nossa nova sala.
  function NovaSala(){
    SalaAula.call(this)
  }

Entao para a funcao NovaSala herdar todos os metodos que a gente tem da funcao SalaAula
a gente usa o object.create que vai fazer a mescla entre prototype de NovaSala com os
metodos ja existentes em SalaAula
  NovaSala.prototype = Object.create(SalaAula.prototype)

Aqui a gente cria um novo obj novaSala:
  const novaSala = new NovaSala()
Ou
  const novaSala = Object.create(NovaSala.prototype)
Que eh o mesmo que
  NovaSala extends SalaAula

E isso funciona pela heranca:
  novaSala.adicionarAluno('Joao')

Grande exemplo:

Quero uma classe Teacher que eh Person, entao:

Person tem como propriedade nome, sobrenome, idade, genero e interesses. 
Uma Person pode dizer Oi (greeting()), dar tchau (farewell()) e 
se apresentar (bio())

Teacher tem tudo isso, mais a propriedade subject que eh o assunto ensinado
e o metodo greeting atualizado (mais formal)

Para construir Person:

function Person(first, last, age, gender, interests) {
  this.name = {first, last};
  this.age = age;
  this.gender = gender;
  this.interests = interests;
};

Person.prototype.greeting = function() {
  alert('Hi! I\'m ' + this.name.first + '.');
};

Person.prototype.greeting = function() {
  alert('Hi! I\'m ' + this.name.first + '.');
};

Person.prototype.farewell = function() {
  alert(this.name.first + ' has left the building. Bye for now!');
}

Para construir Teacher SEM heranca:

function Teacher(first, last, age, gender, interests, subject) {
  this.name = {first, last};
  this.age = age;
  this.gender = gender;
  this.interests = interests;
  this.subject = subject;
}

Para construir Teacher COM heranca:

function Teacher(first, last, age, gender, interests, subject) {
  Person.call(this, first, last, age, gender, interests);

  this.subject = subject;
}

A funcao call() basicamente permite chamar uma funcao definida em outro lugar, mas no
contexto atual. O primeiro parametro especifica o valor this que você deseja usar ao
executar a funcao, e os outros parametros sao aqueles que devem ser passados para a funcao
quando ela eh invocada. Nós queremos que o construtor Teacher() pegue os mesmos parametros 
que o construtor Person() de onde ele está herdando, Entao especificamos todos eles como 
parametros na chamada call().

A última linha dentro do construtor simplesmente define a nova propriedade subject que os 
professores terão, que pessoas genehricas nao possuem.

Agora precisamos obter Teacher para herdar os metodos definidos em Person, para isso
fazemos:

Teacher.prototype = Object.create(Person.prototype);

quando faco Object.create(Person.prototype) eu estou criando um novo objeto que possui
Person.prototype como seu prototipo, ai salvo esse novo objeto como prototipo de Teacher
isso liga Person e Teacher.

IMPORTANTE:

Se chamarmos o construtor de Teacher.prototype teremos Person. Teacher herda de Person, mas
possui seu proprio construtor, para corrigir isso:

Object.defineProperty(Teacher.prototype, 'constructor', { 
    value: Teacher, 
    enumerable: false, // so that it does not appear in 'for in' loop
    writable: true });

 Teacher.prototype.constructor deve retornar Teacher(), conforme desejado, 
 alem de estarmos herdando de Person()

Outro exemplo:

Tijolo:

function Brick() {
  this.width = 10;
  this.height = 20;
}

Tijolo de vidro azul:

function BlueGlassBrick() {
  Brick.call(this);

  this.opacity = 0.5;
  this.color = 'blue';
}

Caso a classe pai nao tenha propriedades, a classe filha so passa this e institui
suas proprias.

Seguindo o exemplo:

Para finalizar nosso codigo, precisamos definir uma nova funcao greeting()
no construtor Teacher():

Teacher.prototype.greeting = function() {
  var prefix;

  if (this.gender === 'male' || this.gender === 'Male' || this.gender === 'm' || this.gender === 'M') {
    prefix = 'Mr.';
  } else if (this.gender === 'female' || this.gender === 'Female' || this.gender === 'f' || this.gender === 'F') {
    prefix = 'Mrs.';
  } else {
    prefix = 'Mx.';
  }

  alert('Hello. My name is ' + prefix + ' ' + this.name.last + ', and I teach ' + this.subject + '.');
};

A classe student fica:

function Student(first, last, age, gender, interests) {
  Person.call(this, first, last, age, gender, interests);
}

Student.prototype = Object.create(Person.prototype);
Student.prototype.constructor = Student;

Student.prototype.greeting = function() {
  alert('Yo! I\'m ' + this.name.first + '.');
};

RESUMIDAMENTE, SERIO, QUE LOUCURA:

basicamente tem tres tipos de propriedade / metodo para se preocupar:

Aqueles definidos dentro de uma funcao construtora que sao dadas a instancias de objetos. 
Estes sao bastante faceis de detectar — em seu proprio codigo personalizado, eles sao os membros
definidos dentro de um construtor usando as linhas this.x = x ; no codigo do navegador, eles sao 
os membros disponiveis apenas para instancias de objetos (geralmente criados chamando um construtor 
usando a palavra-chave new, por exemplo, var myInstance = new myConstructor()).

Aqueles definidos diretamente no proprio construtor, que estao disponiveis apenas no construtor. 
Geralmente, eles estao disponiveis apenas em objetos de navegador internos e sao reconhecidos por 
serem encadeados diretamente em um construtor, nao em uma instancia. Por exemplo, Object.keys().

Aqueles definidos no prototipo de um construtor, que sao herdados por todas as instancias e herdam
as classes de objetos. Estes incluem qualquer membro definido na propriedade de prototipo de um 
Construtor, por ex. myConstructor.prototype.x().

MEU DEUS TEM UM JEITO ABSURDAMENTE MAIS FACIL:
CLASSES ECMASCRIPT 2015

VIRA JAVA VEI

Classes com notacao ECMAScript 2015:

class Person {
  constructor(first, last, age, gender, interests) { //O metodo constructor() define a funcao construtora que representa nossa classe Person.
    this.name = {
      first,
      last
    };
    this.age = age;
    this.gender = gender;
    this.interests = interests;
  }

  greeting() {
    console.log(`Hi! I'm ${this.name.first}`);
  };

  farewell() {
    console.log(`${this.name.first} has left the building. Bye for now!`);
  };
}

greeting() e farewell() sao metodos de classe. Quaisquer metodos que voce deseja
associar a classe sao definidos dentro dela, apos o construtor. Neste exemplo, usamos
template literals em vez de concatenacao de string para facilitar a leitura do codigo.

Para instanciar:

let han = new Person('Han', 'Solo', 25, 'male', ['Smuggling']);
han.greeting();
// Hi! I'm Han

let leia = new Person('Leia', 'Organa', 19, 'female', ['Government']);
leia.farewell();
// Leia has left the building. Bye for now

Heranca:

class Teacher extends Person {
  constructor(first, last, age, gender, interests, subject, grade) {
    this.name = {
      first,
      last
    };

  this.age = age;
  this.gender = gender;
  this.interests = interests;
  // subject and grade are specific to Teacher
  this.subject = subject;
  this.grade = grade;
  }
}

ainda eh possivel usar super():

class Teacher extends Person {
  constructor(first, last, age, gender, interests, subject, grade) {
    super(first, last, age, gender, interests);

    // subject and grade are specific to Teacher
    this.subject = subject;
    this.grade = grade;
  }
}

E usar getters e setters:

class Teacher extends Person {
  constructor(first, last, age, gender, interests, subject, grade) {
    super(first, last, age, gender, interests);
    // subject and grade are specific to Teacher
    this._subject = subject;
    this.grade = grade;
  }

  get subject() {
    return this._subject;
  }

  set subject(newSubject) {
    this._subject = newSubject;
  }
}

Usamos _  para criar um valor separado no qual armazenar nossa propriedade,
sem usar essa convencao, obteriamos erros toda vez que chamassemos get ou set.

Em uso:
// Check the default value
console.log(snape.subject) // Returns "Dark arts"

// Change the value
snape.subject="Balloon animals" // Sets _subject to "Balloon animals"

// Check it again and see if it matches the new value
console.log(snape.subject) // Returns "Balloon animals"

Conversao JSON-------------------------------------------------------------------------------------

Quando o JSON vem 100% pronto:

var requestURL = 'https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json';
/*
O comando acima salva a url de onde vamos puxar o JSON
*/

var request = new XMLHttpRequest();
/*
Crio uma variavel request e passo o objeto XMLHttpRequest a ela
*/

request.open('GET', requestURL);
/*
Abro a requisicao passando GET (quero pegar codigo) e a url de onde vou pegar
*/

request.responseType = 'json';
/*
Seleciono que o tipo de resposta da request eh um JSON
*/

request.send();
/*
Envio a request
*/

request.onload = function() {
	var superHeroes = request.response;
	populateHeader(superHeroes);
	showHeroes(superHeroes);
}
/*
Aqui estamos armazenando a resposta ao nosso pedido (disponivel na propriedade response) 
em uma variavel chamada superHeroes; essa variavel agora contera o objeto JavaScript com 
base no JSON! Entao, estamos passando esse objeto para duas chamadas de funcao — a primeira 
preenchera o <header> com os dados corretos, enquanto a segunda criara uma ficha de 
informacoes para cada herói da equipe e a inserira na <section>.
*/

Quando nao vem bom:
parse(): Aceita uma string JSON como um parametro e retorna o objeto JavaScript correspondente.
stringify(): Aceita um objeto como um parametro e retorna o formato equivalente de string JSON.

parse():
Configurarmos o XHR para retornar texto JSON bruto, em seguida, 
usado parse() para converte-lo em um objeto JavaScript real

request.open('GET', requestURL);
request.responseType = 'text'; // now we're getting a string!
request.send();

request.onload = function() {
  var superHeroesText = request.response; // get the string from the response
  var superHeroes = JSON.parse(superHeroesText); // convert it to an object
  populateHeader(superHeroes);
  showHeroes(superHeroes);
}

stringify():
Criando um objeto JavaScript, em seguida, verificando o que ele contem,
convertendo-o em uma string JSON usando stringify() — salvando o 
valor de retorno em uma nova variavel — e, em seguida, verificando-o novamente.

var myJSON = { "name": "Chris", "age": "38" };
myJSON
var myString = JSON.stringify(myJSON);
myString